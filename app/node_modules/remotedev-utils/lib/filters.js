'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.arrToRegex = arrToRegex;
exports.isFiltered = isFiltered;
exports.filterStagedActions = filterStagedActions;
exports.filterState = filterState;

var _mapValues = require('lodash/mapValues');

var _mapValues2 = _interopRequireDefault(_mapValues);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function arrToRegex(v) {
  return typeof v === 'string' ? v : v.join('|');
}

function filterActions(actionsById, actionsFilter) {
  if (!actionsFilter) return actionsById;
  return (0, _mapValues2.default)(actionsById, function (action, id) {
    return _extends({}, action, { action: actionsFilter(action.action, id) });
  });
}

function filterStates(computedStates, statesFilter) {
  if (!statesFilter) return computedStates;
  return computedStates.map(function (state, idx) {
    return _extends({}, state, { state: statesFilter(state.state, idx) });
  });
}

function isFiltered(action, filters) {
  if (!filters || !action) return false;

  var whitelist = filters.whitelist;
  var blacklist = filters.blacklist;

  var _ref = action.action || action;

  var type = _ref.type;

  return whitelist && !type.match(whitelist) || blacklist && type.match(blacklist);
}

function filterStagedActions(state, filters) {
  if (!filters) return state;

  var filteredStagedActionIds = [];
  var filteredComputedStates = [];

  state.stagedActionIds.forEach(function (id, idx) {
    if (!isFiltered(state.actionsById[id], filters)) {
      filteredStagedActionIds.push(id);
      filteredComputedStates.push(state.computedStates[idx]);
    }
  });

  return _extends({}, state, {
    stagedActionIds: filteredStagedActionIds,
    computedStates: filteredComputedStates
  });
}

function filterState(state, type, localFilter, statesFilter, actionsFilter, nextActionId) {
  if (type === 'ACTION') return !statesFilter ? state : statesFilter(state, nextActionId - 1);else if (type !== 'STATE') return state;

  if (localFilter) {
    var _ret = function () {
      var filteredStagedActionIds = [];
      var filteredComputedStates = [];
      var filteredActionsById = actionsFilter && {};
      var actionsById = state.actionsById;
      var computedStates = state.computedStates;


      state.stagedActionIds.forEach(function (id, idx) {
        if (!isFiltered(actionsById[id], localFilter)) {
          filteredStagedActionIds.push(id);
          filteredComputedStates.push(statesFilter ? _extends({}, computedStates[idx], { state: statesFilter(computedStates[idx].state, idx) }) : computedStates[idx]);
          if (actionsFilter) {
            filteredActionsById[id] = _extends({}, actionsById[id], { action: actionsFilter(actionsById[id].action, id)
            });
          }
        }
      });

      return {
        v: _extends({}, state, {
          actionsById: filteredActionsById || actionsById,
          stagedActionIds: filteredStagedActionIds,
          computedStates: filteredComputedStates
        })
      };
    }();

    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
  }

  if (!statesFilter && !actionsFilter) return state;
  return _extends({}, state, {
    actionsById: filterActions(state.actionsById, actionsFilter),
    computedStates: filterStates(state.computedStates, statesFilter)
  });
}